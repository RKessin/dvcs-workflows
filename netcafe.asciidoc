== Working in a Cafe



[grid="rows",format="csv"]
[options="header",cols="<s,<,<"]
|===========================

Team Members, Well Defined , *Amorphous*
Team Location, Distributed, *Co Located*
Time Frame, On Going, *Limited*
Team Size, Large, *Small*
Leadership, Formal, *Informal*
|===========================

At the opposite end of the spectrum from the Linux Kernel team is the
internet cafe or hackathon session. In this case we can assume 2-4
people are going to be sitting down over a coffee or pizza to develop
something. This would also apply to an early stage startup where
people are writting code on laptops around a table, or a group of
students working on their homework. 

In this case the project probably does not have a formal leadership,
and planning is probably done on a whiteboard. In addition a "Pull
Request" is probably done by turning to your friend and saying "Hey
grab my code" not via a formal Github Pull request. 

On the plus side you have the advantage that everyone is probably in
the same room and may well have known each other before the project
started. 

In this case a deep system like the Linux Kernel team uses makes no
sense what so ever. What we want here is a limited number of peers
each of whom can pull from the others. This can be done with the hg
server option if you are using HG, or by creating a project on Github
and having everyone fork it. When it comes time to integrate code it
will be as simple as doing a pull from the correct repository and
branch. 


To adapt this workflow is as easy as it could be. Create a repository
where everyone can access it then have everyone clone it. Each member of the team 
will commit to his or her own repository. When features need to be integrated changes are 
pushed to a repository then changes can be shared between developers. In this case
there is not a central authoratative version of the source, as in some of the other
workflows, instead it will be up to members of the team to integrate reasonably often
and not let things get too disorganised.

This workflow also takes little or no infrastructure. Each user needs only his own computer
and a way to share repositories. This can be done in several ways. First of all if you are using HG 
you can use the built in http server with the _hg --serve_ command. If you are using git there
is not quire as easy an option, however you can use a cloud hosting service like github or even share 
the repositories with a file server or dropbox. 


What will probably be more work is knowing when you have outgrown this
workflow. At some point three guys sitting around a table with Pizza
can turn into a real company which may require other types of
workflow.

