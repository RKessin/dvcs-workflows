=== The Linux Kernel Team

[grid="rows",format="csv"]
[options="header",cols="<s,<,<"]
|===========================
Team Members, *Well Defined* , *Amorphous*
Team Location, *Distributed*, Co Located
Time Frame, *On Going*, Limited
Team Size, *Large*, Small
Leadership, *Formal*, Informal
Repository Access, *Public*, Private
|===========================

The Linux kernel was the project for which GIT was created, so it is a
good place to start talking out how teams use git to get work
done. (Pretty much everything here would also work with HG). It is
important to understand that GIT was built for large teams, a linux
kernel release may contain thousands of commits from hundreds of
contributers. GIT was built to handle that kind of usage. Thankfully
it scales down quite well for small projects. 

At the center of the Linux Universe in Linus Torvalds. He maintains a
central authoritative copy of the kernel source tree. Around him are a
number of lieutenants each of whom maintain a part of component. This
central group of people is probably pretty stable in terms of
membership. However they are a distributed team. They do not all work
for the same company, nor do they sit in the same place. As such they
needed a tool that would let them work in this way.

The way the system works is that if a developer wishes to submit a
patch he will send a pull request to the maintainer of whichever
component is involved. That maintainer will review those changes and
if he or she approves them forward them up the tree until they
eventually end up with Linus who will release them to the world. 

Now the central team is probably very stable. Linus has been in charge
of the Linux kernel for over 20 years, and most of the senior
lieutenants have probably been doing it for years. However the folks
on the edges may come and go. It is quite possible to think that a
company would write a device driver for some piece of hardware submit
it to the correct person and then only change it once in a while. 

If you have a large team some variation on this work flow may make
sense. In this case what would have to happen is that the project must
be able to decompose into smaller components each of which would be
the responsibility of a component leader. Those component leaders will
have to forward their changes up to the global leader.
  
     
