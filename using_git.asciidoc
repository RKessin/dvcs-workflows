== Using Git

For developers who are used to centralized version control systems like CVS or SVN
transitioning to GIT requires a bit of a mental transition. Unlike SVN a commit in git is a
two phase operation. When you do a *git commit* you are commiting to your local repository. It does
not publish those changes to anyone else. This has several benefits, first of all you can commit work
in progress without woring about "breaking the build" so if you may want to roll back some changes you can 
commit to a branch on your local repository.  It also means that you do not need internet access to commit 
to your local repository. So if you are say writting a book on your laptop while on an international flight (which is 
where this is being written) you can check in your changes to a local repository and then push them
to a shared repository later when you flight lands.  

=== Creating a repository

To create a repository use the command *git init* which will initialize an empty git repository. 
Once a repository has been created files can be added to it and all other operations performed.

=== Basic Operations

The first thing you will wish to do after creating a repository is add some files for it
to track. A repository without any files is not particularly useful, anymore than any other file system
without files.

To add files use the command *git add <file>* you can also add more than one file or a directory structure.

==== Commiting Changes

Once you have added files to a repository you will need to commit changes that have been made.
to do this you use *git commit*. Git will open an editor to let you create a commit message. If you 
want to supply one on the command line use *git commit -m "My Commit Message" file*. 

Warning: unlike CVS and SVN if you do a commit in a subdirectory it will commit all files in the
repository, not just those in the current repository.

==== Using Git with Emacs or and IDE

If you are using Emacs then the same VCS comands that work in CVS or SVN will work with git. So 
you can use "C-v c c" to commit a file or "C-v C-d" to get a directory listing of what files have changed.

If you are using Eclipse, XCode or another IDE then many of these also integrate with GIT. 

==== Undoing changes

==== 

Removing Files

=== Branching and Merging


=== Remote Git

=== Pushing and Pulling
In order to move a set of changes from one repository to another there are two options. You can *push* or *pull* the
changes. A *push* takes the changes in the current repository and merges them into a foreign repository, which can
be on a remote computer, or just a second directory on the same computer. 

The other option is to do a *pull* which takes changes from another repository and moves them into yours. 

In both cases these operations preserve the complete history of commits from the source repository. 

In addition these operations can be be repeated. So Ann can pull changes from Bob who has pulled changes
from Charlie, the final repository will have all three sets of changes. This is very different from sending
a patch file where there is no change history.

=== A Pull Request

Of course if Ann is going to pull changes from Bob she needs a way to know that she should pull his
changes. If Ann and Bob are sitting next to each other Bob may just say to Ann "Ok pull my changes" and let 
her know the URL of the repository and which branch the changes are on. 

Howevver if you are more than three or four people and are not sitting all in
one place you will probably want a more formal way to do this. To support this 
GitHub has created a formal idea of a "Pull Request" which is a formal way for a user to
let another user know that there are changes to be integrated. 

If Ann has chagnes that she wishes Bob to take into his repository via GitHub (or bitbucket) she will 
go to the web site for her repository on Github and then select which branch contains her changes and of course 
who she wishes to send the change request too.  

Bob will then be notified by Github that he has a pull request pending. Github notificiations can be configured
to run over email, threw the website or via the API or a mobile app. 

Bob will then have a chance to review the changes that Ann made and integrate them into his three or reject them.


TODO: Add diagrams here

All of this can also be done via the GITHub API, but that is somewhat beyond the scope of this book. 














