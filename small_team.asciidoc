=== A Workflow for a Small Team

[grid="rows",format="csv"]
[options="header",cols="<s,<,<"]
|===========================

Team Members, *Well Defined* , Amorphous
Team Location, Distributed, *Co Located*
Time Frame, *On Going*, Limited
Team Size, Large, *Small*
Leadership, *Formal*, Informal
|===========================


When you have outgrown the previous workflow, which resembles a fully
connected graph then the question is what to replace it with. There is
not one correct way to do things at this stage but clearly there are
some wrong ways. The Linux Kernel model is clearly overkill for a team
of 6-10 developers.

The simplest model is to have one central repository where everyone
can push changes to integrate. It could also be linked into a CI
system via hooks if that is what is desired. This is a good base but
is probably not the full solution. 

Unlike many of the other models in this book this one relies on pushing
to a central repository. In this case each developer must be given
write access to that repository. When he has changes he does a push
and they are integrated.

As a variation it would also be possible to have a central integration
machine, and he will send that account a pull request. Then move to
the integration machine merge the code and integrate the changes. In order 
for this to work there should not be a backlog of changes and poeple should 
integrate them as soon as possible. 

One place that this can lead to problems is that if changes are not
integrated on a regular basis then integration can become a nightmare,
so make sure that code is integrated on a regular basis.

In addition a DVCS also will allow developers to pull changes from
each other without going threw the central server. This is very useful
for things like doing a code review. If Adam has some code that he has
written that he want Bonnie to review he can ask her to pull that code
directly from him for review. When she is done it can be pushed into
the central server.  

As with the Linux Kernel model it is important to have one central
point of "truth" for the project, so that everyone knows what is going
to be shipped. It would be way to easy for a project to end up with
the situation where there are a number of repos each with a slightly
different version of the code and have no one realize it until two
days before a major deadline. In the previous workflow that risk is
mitigated by close communication and the limited scope of the
project. A hack-a-thon or a typical homework project will probably
only last a few hours to a few days, while a small company might be
working on its code base for a period of years. 
